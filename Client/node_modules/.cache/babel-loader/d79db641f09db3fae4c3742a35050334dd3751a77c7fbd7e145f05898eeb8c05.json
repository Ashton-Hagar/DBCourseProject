{"ast":null,"code":"const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst mysql = require(\"mysql\");\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\nconst connection = mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"DBProject\",\n  database: \"test1\"\n});\nconnection.connect(error => {\n  if (error) {\n    console.error(\"Error connecting to the database:\", error);\n    return;\n  }\n  console.log(\"Connected to the database.\");\n});\napp.post(\"/api/login\", (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n  connection.query(query, [username, password], (error, results) => {\n    if (error) {\n      res.status(500).json({\n        error: \"An error occurred while logging in.\"\n      });\n      return;\n    }\n    if (results.length > 0) {\n      res.status(200).json({\n        message: \"Login successful.\"\n      });\n    } else {\n      res.status(401).json({\n        error: \"Invalid username or password.\"\n      });\n    }\n  });\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","bodyParser","cors","mysql","app","use","json","connection","createConnection","host","user","password","database","connect","error","console","log","post","req","res","username","body","query","results","status","length","message","PORT","process","env","listen"],"sources":["C:/Users/Ashton/Documents/GitHub/DBCourseProject/src/Backend.js"],"sourcesContent":["const express = require(\"express\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst cors = require(\"cors\");\r\nconst mysql = require(\"mysql\");\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\nconst connection = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"DBProject\",\r\n  database: \"test1\",\r\n});\r\n\r\nconnection.connect((error) => {\r\n  if (error) {\r\n    console.error(\"Error connecting to the database:\", error);\r\n    return;\r\n  }\r\n  console.log(\"Connected to the database.\");\r\n});\r\n\r\napp.post(\"/api/login\", (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  const query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\r\n  connection.query(query, [username, password], (error, results) => {\r\n    if (error) {\r\n      res.status(500).json({ error: \"An error occurred while logging in.\" });\r\n      return;\r\n    }\r\n\r\n    if (results.length > 0) {\r\n      res.status(200).json({ message: \"Login successful.\" });\r\n    } else {\r\n      res.status(401).json({ error: \"Invalid username or password.\" });\r\n    }\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMI,GAAG,GAAGL,OAAO,EAAE;AACrBK,GAAG,CAACC,GAAG,CAACH,IAAI,EAAE,CAAC;AACfE,GAAG,CAACC,GAAG,CAACJ,UAAU,CAACK,IAAI,EAAE,CAAC;AAE1B,MAAMC,UAAU,GAAGJ,KAAK,CAACK,gBAAgB,CAAC;EACxCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,WAAW;EACrBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEFL,UAAU,CAACM,OAAO,CAAEC,KAAK,IAAK;EAC5B,IAAIA,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD;EACF;EACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;AAC3C,CAAC,CAAC;AAEFZ,GAAG,CAACa,IAAI,CAAC,YAAY,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEC,QAAQ;IAAET;EAAS,CAAC,GAAGO,GAAG,CAACG,IAAI;EAEvC,MAAMC,KAAK,GAAG,yDAAyD;EACvEf,UAAU,CAACe,KAAK,CAACA,KAAK,EAAE,CAACF,QAAQ,EAAET,QAAQ,CAAC,EAAE,CAACG,KAAK,EAAES,OAAO,KAAK;IAChE,IAAIT,KAAK,EAAE;MACTK,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;QAAEQ,KAAK,EAAE;MAAsC,CAAC,CAAC;MACtE;IACF;IAEA,IAAIS,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MACtBN,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;QAAEoB,OAAO,EAAE;MAAoB,CAAC,CAAC;IACxD,CAAC,MAAM;MACLP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;QAAEQ,KAAK,EAAE;MAAgC,CAAC,CAAC;IAClE;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMa,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrCvB,GAAG,CAAC0B,MAAM,CAACH,IAAI,EAAE,MAAMZ,OAAO,CAACC,GAAG,CAAE,0BAAyBW,IAAK,EAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}